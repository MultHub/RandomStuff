--[[--

WIP PHYSICS ENGINE
DO NOT USE UNLESS YOU WANT CRASHES, BUGS OR FUN DEFYING PHYSICS.

by MultHub aka MultMine aka Multi

--]]--

local _screenWidth, _screenHeight = 0, 0
local materials = {}
function addMaterial(name, options)
	if materials[name] then
		error("Material exists", 1)
	end
	materials[name] = {
		gravity = options["gravity"] or false,
		unstable = options["unstable"] or false,
		onTick = options["onTick"],
		icon = options["icon"] or " ",
		color = options["color"] or colors.white,
	}
end

local objects = {}

local lastid = -1

function addObject(x, y, material)
	objects[lastid+1] = {
		x = x,
		y = y,
		material = material,
	}
	lastid = lastid + 1
	return lastid
end

function removeObject(id)
	objects[id] = nil
end

function getRelativeObject(x, y, ox, oy)
	if x + ox > _screenWidth or x + ox < 1 or y + oy > _screenHeight or y + oy < 1 then
		return "outOfBounds"
	end
	for id, obj in pairs(objects) do
		if obj.x == x + ox and obj.y == y + oy then
			return obj.material, id, obj
		end
	end
	return ""
end

local function tick(...)
	for id, obj in pairs(objects) do
		if materials[obj.material]["onTick"] and type(materials[obj.material]["onTick"]) == "function" then
			materials[obj.material]["onTick"](obj, ...)
		end
		if materials[obj.material]["gravity"] then
			if getRelativeObject(obj.x, obj.y, 0, 1) == "" then
				obj.y = obj.y + 1
			elseif getRelativeObject(obj.x, obj.y, -1, 1) == "" and getRelativeObject(obj.x, obj.y, 1, 1) == "" then
				local dir = math.random(-1, 1)
				local canMove = false
				if (dir == -1 and getRelativeObject(obj.x, obj.y, -1, 0) == "") or (dir == 1 and getRelativeObject(obj.x, obj.y, 1, 0) == "") then
					obj.x = obj.x + dir
					canMove = true
				end
				if dir ~= 0 and canMove then
					obj.y = obj.y + 1
				end
			elseif getRelativeObject(obj.x, obj.y, 1, 1) == "" and getRelativeObject(obj.x, obj.y, 1, 0) == "" then
				obj.x = obj.x + 1
				obj.y = obj.y + 1
			elseif getRelativeObject(obj.x, obj.y, -1, 1) == "" and getRelativeObject(obj.x, obj.y, -1, 0) == "" then
				obj.x = obj.x - 1
				obj.y = obj.y + 1
			end
		end
	end
end

function redraw()
	term.clear()
	for id, obj in pairs(objects) do
		term.setCursorPos(obj.x, obj.y)
		term.setTextColor(materials[obj.material]["color"])
		write(materials[obj.material]["icon"])
	end
end

local running = true

function exit()
	running = false
end

function run(tickSpeed, eventHandler)
	running = true
	_screenWidth, _screenHeight = term.getSize()
	while running do
		local timer
		if tickSpeed > 0 then
			timer = os.startTimer(tickSpeed)
		end
		local lastEvent = {}
		while true do
			local eventData = {os.pullEventRaw()}
			if eventData[1] == "terminate" then
				exit()
				break
			end
			if (eventData[1] == "timer" and eventData[2] == timer) then
				break
			end
			lastEvent = eventData
			if eventHandler then
				eventHandler(unpack(eventData))
			end
			if not timer then
				break
			end
		end
		tick(unpack(lastEvent))
		redraw()
	end
end